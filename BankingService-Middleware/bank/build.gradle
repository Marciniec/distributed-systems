// A minimal example Java project that uses the protobuf plugin.
// To build it:
// $ ../gradlew clean build

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'


repositories {
    mavenCentral()

}

buildscript {
    repositories {
        mavenCentral()

    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.4'

    }
}

dependencies {
    //protocol buffers
    compile 'com.google.protobuf:protobuf-java:3.0.0'
    compile 'io.grpc:grpc-stub:1.0.0-pre2'
    compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
    compile group: 'io.grpc', name: 'grpc-netty', version: '1.11.0'

    if (JavaVersion.current().isJava9Compatible()) {
        compile 'javax.annotation:javax.annotation-api:1.3.1'
    }
    protobuf fileTree("proto/")

    //slice
    compile 'com.zeroc:ice:3.7.1'



    testCompile 'junit:junit:4.12'
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            // Apply the "grpc" plugin whose spec is defined above, without
            // options.  Note the braces cannot be omitted, otherwise the
            // plugin will not be added. This is because of the implicit way
            // NamedDomainObjectContainer binds the methods.
            grpc { }
        }
    }
}

